import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load trained model (pipeline)
model = joblib.load("advanced_model.joblib")

st.set_page_config(page_title="Personalized Health Risk Predictor", layout="wide")
st.title("ü©∫ Personalized Health Risk Predictor")
st.markdown("Enter your health information and get a personalized diabetes risk estimate.")
st.markdown("""
<div style='background-color:#FFF3CD; padding:15px; border-left:6px solid #FFC107; border-radius:5px'>
<b>‚ö†Ô∏è Disclaimer</b><br>
This app is for <b>educational and informational purposes only</b>.<br>
Predictions are generated by machine learning models trained on public datasets and <b>do not constitute a medical diagnosis</b>.<br>
Always consult a <b>qualified healthcare professional</b> before making health decisions.<br><br>
<i>Use this tool responsibly. Your health matters!</i>
</div>
""", unsafe_allow_html=True)
# Expected features (from Pima dataset)
expected_features = [
    "Pregnancies", 
    "Glucose", 
    "BloodPressure", 
    "SkinThickness", 
    "Insulin", 
    "BMI", 
    "DiabetesPedigreeFunction", 
    "Age"
]

# Input form
with st.form("user_input_form"):
    pregnancies = st.number_input("Pregnancies", min_value=0, max_value=20, value=2)
    glucose = st.number_input("Glucose Level", min_value=0, max_value=300, value=120)
    blood_pressure = st.number_input("Blood Pressure", min_value=0, max_value=200, value=70)
    skin_thickness = st.number_input("Skin Thickness", min_value=0, max_value=99, value=20)
    insulin = st.number_input("Insulin", min_value=0, max_value=900, value=80)
    bmi = st.number_input("BMI", min_value=0.0, max_value=70.0, value=25.0, format="%.1f")
    dpf = st.number_input("Diabetes Pedigree Function", min_value=0.0, max_value=2.5, value=0.5, format="%.2f")
    age = st.number_input("Age", min_value=20, max_value=100, value=33)

    submitted = st.form_submit_button("üîÆ Predict Risk")

if submitted:
    # Build DataFrame with correct columns
    user_inputs = {
        "Pregnancies": pregnancies,
        "Glucose": glucose,
        "BloodPressure": blood_pressure,
        "SkinThickness": skin_thickness,
        "Insulin": insulin,
        "BMI": bmi,
        "DiabetesPedigreeFunction": dpf,
        "Age": age
    }

    user_df = pd.DataFrame([user_inputs], columns=expected_features)

    # Prediction
    prob = model.predict_proba(user_df)[0, 1]
    st.metric("Predicted Diabetes Risk", f"{prob:.2%}")
    
    # Simple interpretation
    if prob > 0.7:
        st.error("‚ö†Ô∏è High risk ‚Äî consider consulting a healthcare professional.")
    elif prob > 0.4:
        st.warning("‚ö†Ô∏è Medium risk ‚Äî lifestyle improvements may reduce risk.")
    else:
        st.success("‚úÖ Low risk ‚Äî keep maintaining healthy habits.")
